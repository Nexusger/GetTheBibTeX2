@using Dblp.WebUi.Models;
@model List<SearchResultViewModel>
@{
    bool resultsAvailable = Model != null && Model.Count > 0;

    ViewBag.Title = "Index";

}
<div class="container">
    <h2>Durchsuchen der DBLP</h2>
    @using (Html.BeginForm())
    {
        <div class="input-group input-group-lg" id="search">
            <span class="input-group-addon"><span class="glyphicon glyphicon-search"></span></span>
            <input type="text" class="form-control typeahead" placeholder="LAK, Romero, Analytics,..." autofocus>
        </div>
        @Html.Hidden("hallo", "Nasenbaer")
        @*@Html.Hidden("FoundBy", "FoundBy")
        @Html.Hidden("DisplayText", "DisplayText")
        @Html.Hidden("SearchResultSourceType", "Person")*@

        @*if (resultsAvailable)
        {

            <ul>
                @foreach (var searchResult in Model)
                {
                    <li><input type="checkbox"> @searchResult.DisplayText</li>
                }
            </ul>
        }*@

    <input type="submit" value="Submit RSVP" />
    }
    
    <script>
        
        
        //var substringMatcher = function (strs) {
        //    return function findMatches(q, cb) {
        //        var matches, substrRegex;

        //        // an array that will be populated with substring matches
        //        matches = [];

        //        // regex used to determine if a string contains the substring `q`
        //        substrRegex = new RegExp(q, 'i');

        //        // iterate through the pool of strings and for any string that
        //        // contains the substring `q`, add it to the `matches` array
        //        $.each(strs, function (i, str) {
        //            if (substrRegex.test(str)) {
        //                // the typeahead jQuery plugin expects suggestions to a
        //                // JavaScript object, refer to typeahead docs for more info
        //                matches.push({ value: str });
        //            }
        //        });

        //        cb(matches);
        //    };
        //};

        var searches = [{ "Key": "homepages/d/TorbenDohrn", "FoundBy": "none", "DisplayText": "Torben Dohrn", "SearchResultSourceType": 0 }, { "Key": "homepages/d/FabianDohrn", "FoundBy": "none", "DisplayText": "Fred Dohrn", "SearchResultSourceType": 0 }, { "Key": "conf/l/lak", "FoundBy": "none", "DisplayText": "Learning Analyics Konference", "SearchResultSourceType": 1 }];
        var lok = ['Fred','Bubl'];
        var states = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            // `states` is an array of state names defined in "The Basics"
            local: $.map(searches, function (singleSearch) { return { value: singleSearch.DisplayText }; })
        });
        states.initialize();

        var keys = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('klo'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            // `states` is an array of state names defined in "The Basics"
            local: $.map(lok, function (lus) { return { klo: lus }; })
        });

        keys.initialize();

        $(document).ready(function() {
            $('#search .typeahead').typeahead(
                {
                hint: true,
                highlight: true,
                minLength: 1
            },
                        {
                            name: 'keys',
                            displayKey: 'klo',
                            // `ttAdapter` wraps the suggestion engine in an adapter that
                            // is compatible with the typeahead jQuery plugin
                            source: keys.ttAdapter(),
                            templates: {
                                header: '<h3 class="league-name">Fred und Bubl</h3>'
                            }
                        }
                        ,
            {
                name: 'states',
                displayKey: 'value',
                // `ttAdapter` wraps the suggestion engine in an adapter that
                // is compatible with the typeahead jQuery plugin
                source: states.ttAdapter(),
                templates: {
                    header: '<h3 class="league-name">Suchergebnisse</h3>'
                }
            }
            );
        });

    </script>
</div>
